{"version":3,"sources":["../../src/style/_reset.scss","../../src/style/main.scss","../../src/style/_odileeds.scss","../../src/components/Barnardos.svelte","../../src/components/Table.svelte","../../src/components/chart/Waffle.svelte"],"names":[],"mappings":"AAKA,2ZAaC,QAAS,CACT,SAAU,CACV,QAAS,CACT,cAAe,CACf,YAAa,CACb,uBAAwB,CAGzB,8EAEC,aAAc,CAEf,KACC,aAAc,CAEf,MACC,eAAgB,CAEjB,aACC,WAAY,CAEb,oDAEC,UAAW,CACX,YAAa,CAEd,MACC,wBAAyB,CACzB,gBAAiB,CC7BlB,yBACE,mECZmF,CDanF,cCZuB,CDavB,eAAgB,CAGlB,SACE,cAAe,CACf,kBAAoB,CAGtB,uBAIE,oBAAmB,CAGrB,qBACE,UAAW,CACX,WAAY,CAGd,GAEE,eAAgB,CAGlB,GAEE,eACiB,CAGnB,MAHE,eAMiB,CAHnB,GAEE,eACiB,CAanB,GACE,qBAAsB,CAGxB,YAII,cAAe,CACf,UAAW,CACX,qBAAsB,CACtB,kBC5EoC,CD6EpC,8BAA6C,CAC7C,YAAa,CACb,WAAY,CAVhB,eAYM,SAAU,CACV,QAAS,CACT,kBAAmB,CACnB,iBAAkB,CAfxB,WAqBI,cAAe,CACf,KAAM,CACN,MAAO,CACP,qBAAsB,CACtB,eA9FqB,CA+FrB,UAAW,CACX,YAAa,CA3BjB,gBA6BM,eAAgB,CAzFpB,yCA4DF,WAkCM,eAAgB,CAChB,WAAY,CAnClB,6CAuCY,YAAa,CACd,CAOX,aACE,cAAe,CACf,UAAW,CACX,SAAU,CACV,YAAa,CACb,UAAY,CACZ,4BAAgC,CAChC,WAAY,CACZ,iBAAkB,CAClB,YAAc,CACd,SAAU,CArHV,yCA2GF,aAYI,YAAa,CAEhB,CAzHC,yCAuHA,YAQE,iBAAkB,CAClB,cAAe,CAElB,CAED,WACE,iBAAkB,CADpB,eAGI,SAAU,CAHd,oBAMI,iBAAkB,CAClB,eAAiB,CACjB,qBAAsB,CACtB,kBAAoB,CACpB,OAAQ,CACR,SA1Jc,CA2Jd,UA3Jc,CA4Jd,QAAS,CACT,gBAA+B,CAC/B,eAA8B,CAIlC,eAEI,YA/JuC,CAgKvC,UAAW,CACX,WAAY,CAJhB,kBAOI,WAAY,CAIhB,oBAGM,YA7KoC,CA0K1C,mBAOI,wBAAsE,CAI1E,uBAEI,YAAa,CACb,aAAe,CAHnB,2BAKM,cAAgB,CALtB,mBASI,aAAc,CACd,UAAW,CAVf,mBAaI,YAAa,CACb,cAAe,CAdnB,uBAiBI,UAAW,CACX,kBAAmB,CACnB,iBAAkB,CAnBtB,yBAqBM,cAAgB,CAChB,QAAS,CAtBf,yBA2BM,YA/MwC,CAgNxC,cAhNwC,CAoL9C,2BA+BM,YAAoD,CEtJlC,kBAAI,aACZ,CACd,UAAW,CC7BW,kCAAO,wBACJ,CAAG,0EAElB,iBACY,CACpB,iBAAkB,CAAG,iDACD,UACT,CC5BS,oBAAM,SAClB,CACV,WAAY,CACZ,cAAe","file":"bundle-b6dc93ad.css","sourcesContent":["/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}","$popover-size: 80%;\n\n$background-colour: white;\n$mumsnet-brand-colour: hsl(204, 100%, 32%);\n$teacher-tapp-brand-colour: hsl(164, 76%, 47%);\n$barnardos-brand-colour: hsl(81, 100%, 32%);\n\n@import 'reset', 'odileeds';\n\n// Mixins\n@mixin desktop() {\n  @media only screen and (min-width: 720px) {\n    @content;\n  }\n}\n\n// Placeholders\n%standard-font {\n  font-family: $odileeds-font-stack;\n  font-size: $odileeds-font-size;\n  line-height: 1.2;\n}\n\n%spaced-text {\n  margin-top: 1em;\n  margin-bottom: 0.5em;\n}\n\n%content-block {\n  padding-top: 60px;\n  padding-left: 1em;\n  padding-right: 1em;\n  padding-bottom: 2em;\n}\n\n%full-size {\n  width: 100%;\n  height: 100%;\n}\n\nh1 {\n  @extend %spaced-text;\n  font-size: 1.5em;\n}\n\nh2 {\n  @extend %spaced-text;\n  font-size: 1.2em;\n  font-weight: bold;\n}\n\nh3 {\n  @extend %spaced-text;\n  font-size: 1.1em;\n  font-weight: bold;\n}\n\nhtml {\n  @extend %full-size;\n}\n\ninput,\nselect,\nbutton {\n  @extend %standard-font;\n}\n\ntd {\n  vertical-align: middle;\n}\n\nbody {\n  @extend %standard-font;\n  @extend %full-size;\n  > header {\n    position: fixed;\n    width: 100%;\n    box-sizing: border-box;\n    background: $odileeds-colour-c10;\n    box-shadow: 0 0 5px 1px hsla(0, 0%, 65%, 95%);\n    padding: 1rem;\n    z-index: 100;\n    h1 {\n      padding: 0;\n      margin: 0;\n      white-space: nowrap;\n      overflow-x: scroll;\n    }\n  }\n  > aside {\n    @extend %content-block;\n    @extend %full-size;\n    position: fixed;\n    top: 0;\n    left: 0;\n    box-sizing: border-box;\n    background: $background-colour;\n    z-index: 50;\n    display: none;\n    &.open {\n      display: initial;\n    }\n  }\n  @include desktop {\n    > aside {\n      display: initial;\n      width: 18rem;\n      section {\n        &.hidden {\n          :not(:first-child) {\n            display: none;\n          }\n        }\n      }\n    }\n  }\n}\n\n.toc-display {\n  position: fixed;\n  bottom: 1em;\n  right: 1em;\n  z-index: 1000;\n  color: white;\n  background: hsla(0, 0, 30%, 0.5);\n  border: none;\n  border-radius: 2em;\n  padding: 0.5em;\n  width: 7em;\n  @include desktop {\n    display: none;\n  }\n}\n\n\n[role='main'] {\n  @extend %content-block;\n  @include desktop {\n    margin-left: 22rem;\n    max-width: 50em;\n  }\n}\n\n.container {\n  position: relative;\n  svg {\n    width: 5em;\n  }\n  .popover {\n    position: absolute;\n    background: white;\n    border: 1px solid grey;\n    border-radius: 0.5em;\n    top: 50%;\n    width: $popover-size;\n    height: $popover-size;\n    left: 50%;\n    margin-left: $popover-size / -2;\n    margin-top: $popover-size / -2;\n  }\n}\n\n.barnardos {\n  svg {\n    fill: $barnardos-brand-colour;\n    width: 100%;\n    height: 25px;\n  }\n  .wider {\n    width: 300px;\n  }\n}\n\n.mumsnet {\n  svg {\n    circle {\n      fill: $mumsnet-brand-colour;\n    }\n  }\n  .selected {\n    background-color: change-color($mumsnet-brand-colour, $lightness: 75%);\n  }\n}\n\n.teachertapp {\n  .selector {\n    display: flex;\n    margin: 0.5em 0;\n    svg {\n      padding: 0 0.5em;\n    }\n  }\n  label {\n    display: block;\n    width: 10em;\n  }\n  .grid {\n    display: flex;\n    flex-wrap: wrap;\n  }\n  .response {\n    width: 10em;\n    padding-bottom: 1em;\n    padding-right: 1em;\n    p {\n      font-size: 0.7em;\n      margin: 0;\n    }\n  }\n  svg {\n    .filled {\n      fill: $teacher-tapp-brand-colour;\n      stroke: $teacher-tapp-brand-colour;\n    }\n    .baseline {\n      fill: adjust-hue($teacher-tapp-brand-colour, 120deg);\n    }\n  }\n}\n","$odileeds-colour-c4: hsl(187, 95%, 50%);\n$odileeds-colour-c7: hsl(120, 73%, 65%);\n$odileeds-colour-c10: hsl(323, 85%, 58%);\n\n$odileeds-colour-b5: hsl(0, 0%, 87%);\n\n$odileeds-font-stack: \"Helvetica Neue\", Helvetica, Arial, \"Lucida Grande\", sans-serif;\n$odileeds-font-size: 16px;","<script>\n  import { getCsv } from '../lib/fetch';\n  import Bar from './chart/Bar.svelte';\n  let data;\n  let date = 0;\n  let row = {};\n  let playing = false;\n  let maxReferrals = 0;\n\n  let player;\n\n  let channels = [];\n  let reasons = [];\n  let priorityGroups = [];\n\n  const loader = async () => {\n    data = await getCsv('data/barnardos/referrals.csv');\n    date = data.length - 1;\n  };\n  const loadData = loader();\n\n  $: if (data) {\n    maxReferrals = Math.max(...data.map((x) => x['Total referrals']));\n    row = data[date];\n    const getData = (x) => ({ channel: x, value: row[x] });\n    channels = [\n      'Approved Delivery Partner',\n      'Professional',\n      'Guardian',\n      'Self',\n    ].map(getData);\n    reasons = [\n      'Child mental health',\n      'Isolation & loneliness',\n      'Barriers to reintegration to education',\n      'Parenting support',\n      'Parent mental health',\n      'Barriers to engagement with support services',\n      'Impact of caring responsibilities',\n      'Concerns about children outside the home',\n      'Other',\n      'Exposure to online harm',\n      'Child protection or safeguarding concerns referred to Statutory Agencies',\n    ].map(getData);\n    priorityGroups = [\n      'Child mental health',\n      'BAMER',\n      'Children with SEN',\n      'Children under 5',\n      'At risk of (outside) exploitation',\n      'Young carers',\n    ].map(getData);\n  }\n  const togglePlay = () => {\n    if (player) {\n      window.clearInterval(player);\n      player = undefined;\n      return;\n    }\n    player = window.setInterval(() => {\n      date = (date + 1) % data.length;\n    }, 500);\n  };\n</script>\n\n<style type=\"text/scss\">ul {\n  display: block;\n  width: 100%; }\n</style>\n\n<section class=\"barnardos\">\n  <h2>The Child's Perspective</h2>\n  {#await loadData}\n    <p>Loading data...</p>\n  {:then}\n    <ul>\n      <li>Week ending {row['date']}</li>\n      <li>\n        <button on:click={togglePlay}>{ player ? 'Stop' : 'Play' }</button>\n        <input\n          type=\"range\"\n          bind:value={date}\n          min=\"0\"\n          max={data.length - 1}\n          step=\"1\" />\n      </li>\n      <li>{row['Total referrals']}</li>\n      <li>\n        Breakdown by channel\n        <table>\n          <tr>\n            <td>All Channels</td>\n            <td class=\"wider\">\n              <Bar value={row['Total referrals']} max={maxReferrals} />\n            </td>\n            <td>{row['Total referrals']}</td>\n          </tr>\n          {#each channels as { channel, value }}\n            <tr>\n              <td>{channel}</td>\n              <td class=\"wider\">\n                <Bar {value} max={maxReferrals} />\n              </td>\n              <td>{value}</td>\n            </tr>\n          {/each}\n        </table>\n      </li>\n      <li>\n        <p>Reasons</p>\n        <table>\n          {#each reasons as { channel, value }}\n            <tr>\n              <td>{channel}</td>\n              <td class=\"wider\">\n                <Bar {value} />\n              </td>\n              <td>{value}%</td>\n            </tr>\n          {/each}\n        </table>\n      </li>\n      <li>\n        <p>Priority Group</p>\n        <table>\n          {#each priorityGroups as { channel, value }}\n            <tr>\n              <td>{channel}</td>\n              <td class=\"wider\">\n                <Bar {value} />\n              </td>\n              <td>{value}%</td>\n            </tr>\n          {/each}\n        </table>\n      </li>\n    </ul>\n  {/await}\n</section>\n","<script>\n  import Circle from \"./Circle.svelte\";\n  export let data;\n  export let handler = () => {};\n  export let highlight;\n  const numeric = (n) => !isNaN(n);\n  $: max = data.reduce((accumulator, n) => {\n    const current = Math.max(...Object.values(n).filter(numeric));\n    if (current > accumulator) return current;\n    return accumulator;\n  }, 0);\n</script>\n\n<table>\n  <thead>\n    <tr>\n      {#each data.columns as col, i}\n        <th class:selected={ i === highlight } on:click=\"{() => handler(i)}\">{col}</th>\n      {/each}\n    </tr>\n  </thead>\n  <tbody>\n    {#each data as row}\n      <tr>\n        {#each data.columns as col, i}\n          <td class:selected={ i === highlight }>\n            {#if numeric(row[col])}\n              <Circle\n                radius={Math.sqrt(row[col] / max)}\n                content=\"<p>{row[col]}</p>\" />\n            {:else}{row[col]}{/if}\n          </td>\n        {/each}\n      </tr>\n    {/each}\n  </tbody>\n</table>\n\n<style type=\"text/scss\">table {\n  border-collapse: collapse; }\n  table td,\n  table th {\n    padding: 0.2em 0.5em;\n    text-align: center; }\n  table th:first-child {\n    width: 15em; }\n</style>\n","<script>\n  export let number;\n  export let reference;\n  export let total = 100;\n</script>\n\n<svg viewbox=\"0 0 100 100\">\n  {#each Array(100) as _, cell}\n    <rect\n      class:filled={ cell + 1 <= 100*number/total }\n      class:baseline={ cell + 1 <= 100*reference/total }\n      width=\"5\" height=\"5\"\n      x={(10 * (cell % 10)) + 1}\n      y={(10 * Math.floor((99-cell) / 10)) + 1} />\n  {/each}\n</svg>\n\n<style type=\"text/scss\">rect {\n  fill: #eee;\n  stroke: #eee;\n  stroke-width: 3; }\n</style>"]}