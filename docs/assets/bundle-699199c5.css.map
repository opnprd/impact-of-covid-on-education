{"version":3,"sources":["../../src/style/main.scss","../../src/components/TeacherTapp.svelte","../../src/components/Table.svelte","../../src/components/chart/Waffle.svelte"],"names":[],"mappings":"AAAA,8EAAY,CAOZ,KACE,6BAAiC,CAGnC,QACE,aAAc,CACd,cAAe,CAGjB,WACE,iBAAkB,CADpB,eAGI,SAAU,CAHd,oBAMI,iBAAkB,CAClB,eAAiB,CACjB,qBAAsB,CACtB,kBAAoB,CACpB,OAAQ,CACR,SAzBc,CA0Bd,UA1Bc,CA2Bd,QAAS,CACT,gBAA+B,CAC/B,eAA8B,CAIlC,oBAGM,YAnCoC,CAwC1C,sBAGM,YA1CwC,CCoCtB,oCAAO,YAChB,CACb,cAAe,CAAG,wCAET,UACE,CACX,kBAAmB,CACnB,iBAAkB,CAAG,0CACR,iBACO,CAClB,QAAS,CCvCW,kCAAO,wBACJ,CAAG,0EAElB,iBACY,CACpB,iBAAkB,CAAG,iDACD,UACT,CCPS,sBAAS,SACrB","file":"bundle-699199c5.css","sourcesContent":["@import url(https://fonts.googleapis.com/css2?family=Roboto+Slab&display=swap);\n\n$popover-size: 80%;\n$mumsnet-brand-colour: hsl(204, 100%, 32%);\n$teacher-tapp-brand-colour: hsl(164, 76%, 47%);\n$barnardos-brand-colour: hsl(81, 100%, 32%);\n\nbody {\n  font-family: 'Roboto Slab', serif;\n}\n\narticle {\n  margin: 0 auto;\n  max-width: 50em;\n}\n\n.container {\n  position: relative;\n  svg {\n    width: 5em;\n  }\n  .popover {\n    position: absolute;\n    background: white;\n    border: 1px solid grey;\n    border-radius: 0.5em;\n    top: 50%;\n    width: $popover-size;\n    height: $popover-size;\n    left: 50%;\n    margin-left: $popover-size / -2;\n    margin-top: $popover-size / -2;\n  }\n}\n\n.mumsnet {\n  svg {\n    circle {\n      fill: $mumsnet-brand-colour;\n    }\n  }\n}\n\n.teachertapp {\n  svg {\n    rect {\n      fill: $teacher-tapp-brand-colour;\n    }\n  }\n}","<script>\n  import { query_selector_all } from 'svelte/internal';\nimport { getJson} from '../lib/fetch';\n  import { formatDate } from '../lib/utils';\n  import Waffle from './chart/Waffle.svelte';\n\n  const dataFile = 'data/teacher-tapp/questions.json';\n  const loadData = getJson(dataFile);\n  let dimension = 0;\n</script>\n\n<section class=\"teachertapp\">\n  <h2>Teacher Tapp</h2>\n\n  {#await loadData}\n    <p>Loading data file</p>\n  {:then questions}\n    <label for=\"tt-dimension\">Choose a dimension:</label>\n    <select id=\"tt-dimension\" bind:value={dimension}>\n      {#each questions.k as dim, i}\n        <option value={ i }>{ dim }</option>\n      {/each}\n    </select>\n\n    {#each questions.q as question}\n      <h3>{ question.q }</h3>\n      <div class=\"grid\">\n        {#each question.a as response }\n          <section class=\"response\">\n            <Waffle number={ response.d[dimension] } />\n            <p>{ response.t }</p>\n          </section>\n        {/each}\n      </div>\n      <p>Total respondents { question.r }</p>\n      <p>Question asked on { formatDate(question.d) }</p>\n    {/each}\n  {/await}\n</section>\n\n<style type=\"text/scss\">.grid {\n  display: flex;\n  flex-wrap: wrap; }\n\n.response {\n  width: 10em;\n  padding-bottom: 1em;\n  padding-right: 1em; }\n  .response p {\n    font-size: smaller;\n    margin: 0; }\n</style>","<script>\n  import Circle from \"./Circle.svelte\";\n  export let data;\n  const numeric = (n) => !isNaN(n);\n  $: max = data.reduce((accumulator, n) => {\n    const current = Math.max(...Object.values(n).filter(numeric));\n    if (current > accumulator) return current;\n    return accumulator;\n  }, 0);\n</script>\n\n<style type=\"text/scss\">table {\n  border-collapse: collapse; }\n  table td,\n  table th {\n    padding: 0.2em 0.5em;\n    text-align: center; }\n  table th:first-child {\n    width: 15em; }\n</style>\n\n<table>\n  <thead>\n    <tr>\n      {#each data.columns as col}\n        <th>{col}</th>\n      {/each}\n    </tr>\n  </thead>\n  <tbody>\n    {#each data as row}\n      <tr>\n        {#each data.columns as col}\n          <td>\n            {#if numeric(row[col])}\n              <Circle\n                radius={Math.sqrt(row[col] / max)}\n                content=\"<p>{row[col]}</p>\" />\n            {:else}{row[col]}{/if}\n          </td>\n        {/each}\n      </tr>\n    {/each}\n  </tbody>\n</table>\n","<script>\n  export let number;\n  export let total = 100;\n</script>\n\n<svg viewbox=\"0 0 120 120\">\n  {#each Array(100) as _, cell}\n    <rect class:greyed={ cell + 1 > 100*number/total } width=\"10\" height=\"10\" x={12 * (cell % 10)} y={12 * Math.floor((99-cell) / 10)}></rect>\n  {/each}\n</svg>\n\n<style type=\"text/scss\">.greyed {\n  fill: #eee; }\n</style>"]}