{"version":3,"sources":["../../src/style/main.scss","../../src/components/ControlPanel.svelte","../../src/components/Header.svelte","../../src/components/TeacherTapp.svelte","../../src/components/Table.svelte","../../src/components/chart/Waffle.svelte"],"names":[],"mappings":"AAAA,8EAAY,CAOZ,KACE,cAAe,CAGjB,kBACE,6BAAiC,CACjC,aAAc,CALhB,YASE,iBAAkB,CAClB,cAAe,CACf,iBAAkB,CAGpB,WACE,iBAAkB,CADpB,eAGI,SAAU,CAHd,oBAMI,iBAAkB,CAClB,eAAiB,CACjB,qBAAsB,CACtB,kBAAoB,CACpB,OAAQ,CACR,SA/Bc,CAgCd,UAhCc,CAiCd,QAAS,CACT,gBAA+B,CAC/B,eAA8B,CAIlC,oBAGM,YAzCoC,CAsC1C,mBAOI,wBAAsE,CAI1E,sBAGM,YAnDwC,CAgD9C,+BAKQ,cAA8C,CC/C9B,oCAAO,cACd,CACf,cAAgB,CAChB,KAAM,CACN,SAAU,CAEV,sBAAiB,CACjB,sBAAuB,CACvB,kBAAqB,CACrB,WAAY,CACZ,WAAY,CAAG,qCAET,UACK,CAAG,gEAEmB,YACpB,CCrBb,sBAAQ,cACS,CACf,KAAM,CACN,MAAO,CACP,YAAa,CACb,eAAiB,CACjB,UAAW,CACX,WAAY,CACZ,yCAA6C,CCAzB,oCAAO,YAChB,CACb,cAAe,CAAG,wCAET,UACE,CACX,kBAAmB,CACnB,iBAAkB,CAAG,0CACR,cACK,CAChB,QAAS,CCeW,kCAAO,wBACJ,CAAG,0EAElB,iBACY,CACpB,iBAAkB,CAAG,iDACD,UACT,CC9BS,sBAAS,SACrB","file":"bundle-2277ba20.css","sourcesContent":["@import url(https://fonts.googleapis.com/css2?family=Roboto+Slab&display=swap);\n\n$popover-size: 80%;\n$mumsnet-brand-colour: hsl(204, 100%, 32%);\n$teacher-tapp-brand-colour: hsl(164, 76%, 47%);\n$barnardos-brand-colour: hsl(81, 100%, 32%);\n\nhtml {\n  font-size: 14px;\n}\n\nbody, input, select {\n  font-family: 'Roboto Slab', serif;\n  font-size: 1em;\n}\n\n[role=main] {\n  margin-left: 22rem;\n  max-width: 50em;\n  padding-top: 100px;\n}\n\n.container {\n  position: relative;\n  svg {\n    width: 5em;\n  }\n  .popover {\n    position: absolute;\n    background: white;\n    border: 1px solid grey;\n    border-radius: 0.5em;\n    top: 50%;\n    width: $popover-size;\n    height: $popover-size;\n    left: 50%;\n    margin-left: $popover-size / -2;\n    margin-top: $popover-size / -2;\n  }\n}\n\n.mumsnet {\n  svg {\n    circle {\n      fill: $mumsnet-brand-colour;\n    }\n  }\n  .selected {\n    background-color: change-color($mumsnet-brand-colour, $lightness: 75%);\n  }\n}\n\n.teachertapp {\n  svg {\n    rect {\n      fill: $teacher-tapp-brand-colour;\n      &.baseline {\n        stroke: complement($teacher-tapp-brand-colour);\n      }\n    }\n  }\n}","<script>\n  import { dimension, comparator, questions } from '../store/teacher-tapp.js';\n  import { datasets as mDatasets, dataset as mDataset } from '../store/mumsnet';\n  import Twistie from './Twistie.svelte';\n\n  let barnardosHidden = true;\n  let mumsnetHidden = true;\n  let teacherTappHidden = true;\n</script>\n\n<style type=\"text/scss\">aside {\n  position: fixed;\n  font-size: 0.9em;\n  top: 0;\n  left: -2px;\n  padding: 1rem;\n  padding-top: 9rem;\n  box-sizing: content-box;\n  background: lightgrey;\n  height: 100%;\n  width: 18rem; }\n\nselect {\n  width: 100%; }\n\nsection.hidden :not(:first-child) {\n  display: none; }\n</style>\n\n<aside>\n  <section class:hidden={barnardosHidden}>\n    <h2 on:click={ () => barnardosHidden = !barnardosHidden }>\n      <Twistie hidden={barnardosHidden} />\n      The Child's Perspective</h2>\n    <p>\n      TKTKTK\n    </p>\n  </section>\n\n  <section class:hidden={mumsnetHidden}>\n    <h2 on:click={ () => mumsnetHidden = !mumsnetHidden }>\n      <Twistie hidden={mumsnetHidden} />\n      The Parent's Perspective</h2>\n    <p>\n      The text extracted from the Mumsnet forums has been analysed to assess the\n      relative frequencies of individual terms and pairs of words during all of\n      January, April and September 2020.\n    </p>\n    <p>\n      You can select either 'Tokens' for single words or 'Bigrams' for pairs of\n      words. Clicking the column title will sort the terms by the prevalence in\n      that month. The number of terms will be limited to the top 10.\n    </p>\n    <select bind:value={$mDataset}>\n      {#each $mDatasets as opt, i}\n        <option value={i}>{opt.charAt(0).toUpperCase() + opt.slice(1)}</option>\n      {/each}\n    </select>\n  </section>\n\n  {#if $questions}\n    <section class:hidden={ teacherTappHidden }>\n      <h2 on:click={ () => teacherTappHidden = !teacherTappHidden }>\n        <Twistie hidden={teacherTappHidden} />\n        The Teacher's Perspective</h2>\n      <p>\n        We commissioned a series of surveys with Teacher Tapp.\n        TKTKTK\n      </p>\n      <p>\n        The square charts show the percentage of respondents who selected that\n        option. Each square represents 1 percent.\n      </p>\n      <p>\n        The surveys returned by the teachers have been segmented during\n        analysis. Select a segment to drill down into the results.\n      </p>\n      <div>\n        <label for=\"tt-dimension\">Primary</label>\n        <select id=\"tt-dimension\" bind:value={$dimension}>\n          {#each $questions.k as dim, i}\n            <option value={i}>{dim}</option>\n          {/each}\n        </select>\n      </div>\n      {#if $dimension != 0}\n        <p>\n          You can comare this result against another segment by selecting below.\n          That will appear as a solid border on the chart.\n        </p>\n        <div>\n          <label for=\"tt-dimension\">Comparison</label>\n          <select id=\"tt-dimension\" bind:value={$comparator}>\n            <option>None</option>\n            {#each $questions.k as dim, i}\n              <option value={i}>{dim}</option>\n            {/each}\n          </select>\n        </div>\n      {/if}\n    </section>\n  {/if}\n</aside>\n","<header>\n  <h1>Exploring the impact of COVID-19 on Education</h1>\n</header>\n\n<style>\n  header {\n    position: fixed;\n    top: 0;\n    left: 0;\n    padding: 1rem;\n    background: white;\n    width: 100%;\n    z-index: 100;\n    box-shadow: 0 0 5px 1px hsla(0, 0%, 65%, 95%);\n  }\n</style>","<script>\n  import { getJson } from '../lib/fetch';\n  import { formatDate } from '../lib/utils';\n  import Waffle from './chart/Waffle.svelte';\n  import { dimension, comparator, questions } from '../store/teacher-tapp.js';\n  \n  const dataFile = 'data/teacher-tapp/questions.json';\n  const loadData = async () => {\n    questions.set(await getJson(dataFile));\n  }\n  const loader = loadData();\n</script>\n\n<style type=\"text/scss\">.grid {\n  display: flex;\n  flex-wrap: wrap; }\n\n.response {\n  width: 10em;\n  padding-bottom: 1em;\n  padding-right: 1em; }\n  .response p {\n    font-size: 0.7em;\n    margin: 0; }\n</style>\n\n<section class=\"teachertapp\">\n  <h2>The Teacher's Perspective</h2>\n  {#await loader}\n    <p>Loading data file</p>\n  {:then}\n    {#each $questions.q as question}\n      <h3>{question.q}</h3>\n      <div class=\"grid\">\n        {#each question.a as response}\n          <section class=\"response\">\n            <Waffle\n              number={response.d[$dimension]}\n              reference={$dimension > 0 ? response.d[$comparator] : undefined} />\n            <p>{response.t}</p>\n          </section>\n        {/each}\n      </div>\n      <p>Total respondents {question.r}</p>\n      <p>Question asked on {formatDate(question.d)}</p>\n    {/each}\n  {/await}\n</section>\n","<script>\n  import Circle from \"./Circle.svelte\";\n  export let data;\n  export let handler = () => {};\n  export let highlight;\n  const numeric = (n) => !isNaN(n);\n  $: max = data.reduce((accumulator, n) => {\n    const current = Math.max(...Object.values(n).filter(numeric));\n    if (current > accumulator) return current;\n    return accumulator;\n  }, 0);\n</script>\n\n<table>\n  <thead>\n    <tr>\n      {#each data.columns as col, i}\n        <th class:selected={ i === highlight } on:click=\"{() => handler(i)}\">{col}</th>\n      {/each}\n    </tr>\n  </thead>\n  <tbody>\n    {#each data as row}\n      <tr>\n        {#each data.columns as col, i}\n          <td class:selected={ i === highlight }>\n            {#if numeric(row[col])}\n              <Circle\n                radius={Math.sqrt(row[col] / max)}\n                content=\"<p>{row[col]}</p>\" />\n            {:else}{row[col]}{/if}\n          </td>\n        {/each}\n      </tr>\n    {/each}\n  </tbody>\n</table>\n\n<style type=\"text/scss\">table {\n  border-collapse: collapse; }\n  table td,\n  table th {\n    padding: 0.2em 0.5em;\n    text-align: center; }\n  table th:first-child {\n    width: 15em; }\n</style>\n","<script>\n  export let number;\n  export let reference;\n  export let total = 100;\n</script>\n\n<svg viewbox=\"0 0 120 120\">\n  {#each Array(100) as _, cell}\n    <rect\n      class:greyed={ cell + 1 > 100*number/total }\n      class:baseline={ cell + 1 <= 100*reference/total }\n      width=\"10\" height=\"10\" x={12 * (cell % 10)} y={12 * Math.floor((99-cell) / 10)}></rect>\n  {/each}\n</svg>\n\n<style type=\"text/scss\">.greyed {\n  fill: #eee; }\n</style>"]}